#+html: <a name="26"></a>
** J26: Allokering på stacken vs. på heapen :G3:Lab:

 #+begin_summary
 Demonstrera förståelse för skillnaden mellan allokering på stacken
 och allokering på heapen med hjälp av ett C-program.
 #+end_summary

 Läs [[https://github.com/IOOPM-UU/ioopm15/blob/master/extramaterial/C-addendum-om-stack-och-heap.pdf][C: addendum om stack & heap]]

 Pröva gärna också att t.ex. jämföra prestanda mellan ett program
 som allokerar mycket på stacken med ett som allokerar mycket på
 heapen (t.ex. genom att skriva om nedanstående rekursiva
 fibonacci-program där samtliga heltal mallokeras på heapen). Vad
 får det för effekt på uträkningens prestanda?


 #+BEGIN_SRC c
 #include<stdio.h>
 #include<stdlib.h>

 int *heap_int(int i)
 {
   int *result = malloc(sizeof(int));
   *result = i;
   return result;
 }

 int *fib(int *n)
 {
   if (*n == 0)
     {
       return heap_int(0);
     }
   else
     {
       if (*n == 1)
	 {
	   return heap_int(1);
	 }
       else
	 {
	   return heap_int(*fib(heap_int(*n-1)) + *fib(heap_int(*n-2)));
	 }
     }
 }

 // OBSERVERA!
 // Detta program läcker minne som ett såll -- det frigör inte några allokerade pekare
 int main(int argc, char **argv)
 {
   if (argc < 2)
     {
       puts("Usage: ./fib-rec 5");
     }
   else
     {
       int *n = heap_int(atoi(*(argv+1)));
       printf("fib(%d) = %d\n", *n, *fib(n));
     }
   return 0;
 }
 #+END_SRC




-----

*Report a bug on this achievement?* Please place an issue on [[https://github.com/IOOPM-UU/achievements/issues/new?title=Bug%20in%20achievement%20J26&body=Please%20describe%20the%20bug,%20comment%20or%20issue%20here&assignee=TobiasWrigstad][GitHub]].
