#+html: <a name="18"></a>
** H18: Jämförelsemetoden ~equals()~ :G5:Lab:

 #+begin_summary
 Implementera stöd för strukturell likhet med hjälp av ~equals()~ i 
 Java.
 #+end_verse

 I Java-program används metoden ~equals()~ för att jämföra två
 godtyckliga objekt oavsett typ. Denna metod bör uppfylla ett antal
 regler:

 1. ~a.equals(b) == true~ implicerar ~b.equals(a) == true~
 2. ~a.equals(b) == false~ implicerar ~b.equals(a) == false~
 3. Signaturen för ~equals()~ skall vara ~Object -> boolean~

 Man kan diskutera om ~equals()~-metoden bör förlita sig på
 föränderligt tillstånd eller ej. Ett problem med detta är att två
 objekt som är lika enligt ~equals()~ senare kan ändras till att
 inte vara lika längre, vilket kan leda till problem om man
 förlitar sig på den "redan uträknade likheten" senare i
 programmet. 

 Hur "lika" definieras kan vara olika -- ibland används begreppet
 /identisk/ för att avse att /A/ och /B/ är samma objekt; ibland
 används konceptet /strukturellt lika/ eller /ekvivalenta/ för att
 avse att /A/ och /B/ är två olika objekt men som ändå i enligt den
 gällande formen av likhet kan anses vara "utbytbara", t.ex. /A/
 och /B/ är två olika kakburkar som innehåller samma kaka.

 *Överkurs:* tänk på relationen mellan ~equals()~ och
 ~hashcode()~ och fundera över varför man ofta bör definiera en
 ~hashcode()~-metod om man också definierar en ~equals()~-metod.



-----

*Report a bug on this achievement?* Please place an issue on [[https://github.com/IOOPM-UU/achievements/issues/new?title=Bug%20in%20achievement%20H18&body=Please%20describe%20the%20bug,%20comment%20or%20issue%20here&assignee=TobiasWrigstad][GitHub]].
