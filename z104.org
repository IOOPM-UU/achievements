#+html: <a name="104"></a>
** TODO Z104: Assignment 4                                           :G3:Lab:

*** Redovisa förståelse för  objektorienterad programmering i Java

 Detta är det andra Java-program som skrivs på kursen. Precis som
 senare i C-fasen ställer vi högre krav på idiomatiskt korrekt Java
 än för föregående program. Förutom att programmet skall fungera
 korrekt skall det som vanligt:

 - inte kraschar vid körning med valid indata
 - skyddar sig från felaktig indata på lämpligt sätt och i lämplig utsträckning
 - inte behöva kompileras om när indata ändras
 - ha ett lämpligt förhållningssätt till [[http://en.wikipedia.org/wiki/Not_invented_here][NIH]] och [[http://en.wikipedia.org/wiki/Don't_repeat_yourself][DRY]]

 Med icke-idiomatisk Java avses för enkelhets skull:

 - följ Javas namngivningsstandard (=camelCasing=, Klasser/Interface har stor begynnelsebokstav, metoder liten begynnelsebokstav)
 - endast en klass per fil, förutom inre och nästlade klasser
 - ~equals()~-metoder skall vara symmetriska ~(a.equals(b) == b.equals(a))~
 - använd ~public static final~ för konstanter eller enums 

 Ytterligare icke-funktionella krav är 

 - inga globala variabler 
 - inga magiska nummer (t.ex. 128 står överallt i koden)
 - kodens indentering lyfter fram [[http://en.wikipedia.org/wiki/Control_flow][kontrollflödet]]
 - ingen "machokodning" (t.ex. omotiverade oneliners)
 - återkommande logik är utbruten och inkapslad i egna metoder eller klasser 
 - namn på filer, variabler, funktioner, etc. skall hjälpa läsaren att förstå deras innebörd, och beteende (t.ex. vilka värden som är rimliga, eller vad man kan förvänta sig från ett funktionsanrop)
 - har tydligt dokumenterade gränssnitt som går att förstå utan att läsa koden och *helst* är formaterade med Doxygen eller JavaDoc
 - programmet går att bygga och testa med en makefil (~make all~ och ~make test~)
 - programmet har enhetstester för alla viktiga metoder
   - som inte bara skrevs efter att programmet var klart "för att ha tester"
   - som använder junit
   - där varje test prövar en sak, och flera tester görs ej i samma testfunktion

 Vidare måste en annan grupp ha granskat uppgiften innan den kan
 bli helt godkänd (jämlikt [[au:45][P45]]).

 **Ändring 2016:** meningen "Vidare måste en annan grupp ha
 granskat uppgiften innan den kan bli helt godkänd (jämlikt [[au:45][P45]])."
 ersätts av "Vidare vore det väldigt trevligt, stimulerande för
 djuplärningen, och kanske också positivt för programmets kvalitet,
 om en annan grupp har granskat uppgiften innan den redovisas
 (jämlikt [[au:45][P45]])."

 Inlämningsinstruktioner finns i uppgiftstexten!

-----

*Report a bug on this achievement?* Please place an issue on [[https://github.com/IOOPM-UU/achievements/issues/new?title=Bug%20in%20achievement%20z104&body=Please%20describe%20the%20bug,%20comment%20or%20issue%20here&assignee=TobiasWrigstad][GitHub]].
